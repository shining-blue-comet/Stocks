/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MetaStocksSBTInterface extends ethers.utils.Interface {
  functions: {
    "burn(address)": FunctionFragment;
    "getProfile(address,address)": FunctionFragment;
    "getSoul(address)": FunctionFragment;
    "hasProfile(address,address)": FunctionFragment;
    "hasSoul(address)": FunctionFragment;
    "listProfiles(address)": FunctionFragment;
    "mint(address,(string,string,uint256,uint256))": FunctionFragment;
    "name()": FunctionFragment;
    "operator()": FunctionFragment;
    "removeProfile(address,address)": FunctionFragment;
    "setProfile(address,(string,string,uint256,uint256))": FunctionFragment;
    "ticker()": FunctionFragment;
    "update(address,(string,string,uint256,uint256))": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "burn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getProfile",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getSoul", values: [string]): string;
  encodeFunctionData(
    functionFragment: "hasProfile",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "hasSoul", values: [string]): string;
  encodeFunctionData(
    functionFragment: "listProfiles",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      string,
      {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeProfile",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfile",
    values: [
      string,
      {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "ticker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [
      string,
      {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSoul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasSoul", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {
    "Burn(address)": EventFragment;
    "Mint(address)": EventFragment;
    "RemoveProfile(address,address)": EventFragment;
    "SetProfile(address,address)": EventFragment;
    "Update(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Update"): EventFragment;
}

export type BurnEvent = TypedEvent<[string] & { _soul: string }>;

export type MintEvent = TypedEvent<[string] & { _soul: string }>;

export type RemoveProfileEvent = TypedEvent<
  [string, string] & { _profiler: string; _soul: string }
>;

export type SetProfileEvent = TypedEvent<
  [string, string] & { _profiler: string; _soul: string }
>;

export type UpdateEvent = TypedEvent<[string] & { _soul: string }>;

export class MetaStocksSBT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MetaStocksSBTInterface;

  functions: {
    burn(
      _soul: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProfile(
      _profiler: string,
      _soul: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber] & {
          identity: string;
          url: string;
          score: BigNumber;
          timestamp: BigNumber;
        }
      ]
    >;

    getSoul(
      _soul: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber] & {
          identity: string;
          url: string;
          score: BigNumber;
          timestamp: BigNumber;
        }
      ]
    >;

    hasProfile(
      _profiler: string,
      _soul: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasSoul(_soul: string, overrides?: CallOverrides): Promise<[boolean]>;

    listProfiles(_soul: string, overrides?: CallOverrides): Promise<[string[]]>;

    mint(
      _soul: string,
      _soulData: {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    removeProfile(
      _profiler: string,
      _soul: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProfile(
      _soul: string,
      _soulData: {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ticker(overrides?: CallOverrides): Promise<[string]>;

    update(
      _soul: string,
      _soulData: {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burn(
    _soul: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProfile(
    _profiler: string,
    _soul: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      identity: string;
      url: string;
      score: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getSoul(
    _soul: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      identity: string;
      url: string;
      score: BigNumber;
      timestamp: BigNumber;
    }
  >;

  hasProfile(
    _profiler: string,
    _soul: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasSoul(_soul: string, overrides?: CallOverrides): Promise<boolean>;

  listProfiles(_soul: string, overrides?: CallOverrides): Promise<string[]>;

  mint(
    _soul: string,
    _soulData: {
      identity: string;
      url: string;
      score: BigNumberish;
      timestamp: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  operator(overrides?: CallOverrides): Promise<string>;

  removeProfile(
    _profiler: string,
    _soul: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProfile(
    _soul: string,
    _soulData: {
      identity: string;
      url: string;
      score: BigNumberish;
      timestamp: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ticker(overrides?: CallOverrides): Promise<string>;

  update(
    _soul: string,
    _soulData: {
      identity: string;
      url: string;
      score: BigNumberish;
      timestamp: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burn(_soul: string, overrides?: CallOverrides): Promise<void>;

    getProfile(
      _profiler: string,
      _soul: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        identity: string;
        url: string;
        score: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getSoul(
      _soul: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        identity: string;
        url: string;
        score: BigNumber;
        timestamp: BigNumber;
      }
    >;

    hasProfile(
      _profiler: string,
      _soul: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasSoul(_soul: string, overrides?: CallOverrides): Promise<boolean>;

    listProfiles(_soul: string, overrides?: CallOverrides): Promise<string[]>;

    mint(
      _soul: string,
      _soulData: {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    operator(overrides?: CallOverrides): Promise<string>;

    removeProfile(
      _profiler: string,
      _soul: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfile(
      _soul: string,
      _soulData: {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    ticker(overrides?: CallOverrides): Promise<string>;

    update(
      _soul: string,
      _soulData: {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Burn(address)"(
      _soul?: null
    ): TypedEventFilter<[string], { _soul: string }>;

    Burn(_soul?: null): TypedEventFilter<[string], { _soul: string }>;

    "Mint(address)"(
      _soul?: null
    ): TypedEventFilter<[string], { _soul: string }>;

    Mint(_soul?: null): TypedEventFilter<[string], { _soul: string }>;

    "RemoveProfile(address,address)"(
      _profiler?: null,
      _soul?: null
    ): TypedEventFilter<[string, string], { _profiler: string; _soul: string }>;

    RemoveProfile(
      _profiler?: null,
      _soul?: null
    ): TypedEventFilter<[string, string], { _profiler: string; _soul: string }>;

    "SetProfile(address,address)"(
      _profiler?: null,
      _soul?: null
    ): TypedEventFilter<[string, string], { _profiler: string; _soul: string }>;

    SetProfile(
      _profiler?: null,
      _soul?: null
    ): TypedEventFilter<[string, string], { _profiler: string; _soul: string }>;

    "Update(address)"(
      _soul?: null
    ): TypedEventFilter<[string], { _soul: string }>;

    Update(_soul?: null): TypedEventFilter<[string], { _soul: string }>;
  };

  estimateGas: {
    burn(
      _soul: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProfile(
      _profiler: string,
      _soul: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSoul(_soul: string, overrides?: CallOverrides): Promise<BigNumber>;

    hasProfile(
      _profiler: string,
      _soul: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasSoul(_soul: string, overrides?: CallOverrides): Promise<BigNumber>;

    listProfiles(_soul: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _soul: string,
      _soulData: {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    removeProfile(
      _profiler: string,
      _soul: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProfile(
      _soul: string,
      _soulData: {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ticker(overrides?: CallOverrides): Promise<BigNumber>;

    update(
      _soul: string,
      _soulData: {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      _soul: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProfile(
      _profiler: string,
      _soul: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSoul(
      _soul: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasProfile(
      _profiler: string,
      _soul: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSoul(
      _soul: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listProfiles(
      _soul: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _soul: string,
      _soulData: {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeProfile(
      _profiler: string,
      _soul: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProfile(
      _soul: string,
      _soulData: {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ticker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    update(
      _soul: string,
      _soulData: {
        identity: string;
        url: string;
        score: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
