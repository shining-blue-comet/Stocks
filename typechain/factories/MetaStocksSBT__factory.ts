/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MetaStocksSBT, MetaStocksSBTInterface } from "../MetaStocksSBT";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_ticker",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_soul",
        type: "address",
      },
    ],
    name: "Burn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_soul",
        type: "address",
      },
    ],
    name: "Mint",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_profiler",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_soul",
        type: "address",
      },
    ],
    name: "RemoveProfile",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_profiler",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_soul",
        type: "address",
      },
    ],
    name: "SetProfile",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_soul",
        type: "address",
      },
    ],
    name: "Update",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_soul",
        type: "address",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_profiler",
        type: "address",
      },
      {
        internalType: "address",
        name: "_soul",
        type: "address",
      },
    ],
    name: "getProfile",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "identity",
            type: "string",
          },
          {
            internalType: "string",
            name: "url",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "score",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MetaStocksSBT.Soul",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_soul",
        type: "address",
      },
    ],
    name: "getSoul",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "identity",
            type: "string",
          },
          {
            internalType: "string",
            name: "url",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "score",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MetaStocksSBT.Soul",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_profiler",
        type: "address",
      },
      {
        internalType: "address",
        name: "_soul",
        type: "address",
      },
    ],
    name: "hasProfile",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_soul",
        type: "address",
      },
    ],
    name: "hasSoul",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_soul",
        type: "address",
      },
    ],
    name: "listProfiles",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_soul",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "identity",
            type: "string",
          },
          {
            internalType: "string",
            name: "url",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "score",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MetaStocksSBT.Soul",
        name: "_soulData",
        type: "tuple",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "operator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_profiler",
        type: "address",
      },
      {
        internalType: "address",
        name: "_soul",
        type: "address",
      },
    ],
    name: "removeProfile",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_soul",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "identity",
            type: "string",
          },
          {
            internalType: "string",
            name: "url",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "score",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MetaStocksSBT.Soul",
        name: "_soulData",
        type: "tuple",
      },
    ],
    name: "setProfile",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ticker",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_soul",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "identity",
            type: "string",
          },
          {
            internalType: "string",
            name: "url",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "score",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MetaStocksSBT.Soul",
        name: "_soulData",
        type: "tuple",
      },
    ],
    name: "update",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040527fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4706006553480156200003557600080fd5b506040516200154038038062001540833981016040819052620000589162000211565b81516200006d9060039060208501906200009e565b508051620000839060049060208401906200009e565b5050600580546001600160a01b0319163317905550620002b7565b828054620000ac906200027b565b90600052602060002090601f016020900481019282620000d057600085556200011b565b82601f10620000eb57805160ff19168380011785556200011b565b828001600101855582156200011b579182015b828111156200011b578251825591602001919060010190620000fe565b50620001299291506200012d565b5090565b5b808211156200012957600081556001016200012e565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200016c57600080fd5b81516001600160401b038082111562000189576200018962000144565b604051601f8301601f19908116603f01168101908282118183101715620001b457620001b462000144565b81604052838152602092508683858801011115620001d157600080fd5b600091505b83821015620001f55785820183015181830184015290820190620001d6565b83821115620002075760008385830101525b9695505050505050565b600080604083850312156200022557600080fd5b82516001600160401b03808211156200023d57600080fd5b6200024b868387016200015a565b935060208501519150808211156200026257600080fd5b5062000271858286016200015a565b9150509250929050565b600181811c908216806200029057607f821691505b602082108103620002b157634e487b7160e01b600052602260045260246000fd5b50919050565b61127980620002c76000396000f3fe608060405234801561001057600080fd5b50600436106100bf5760003560e01c80638ba47bdd1161007c5780638ba47bdd1461015d57806396367d4c14610165578063bb419e1b14610185578063bdd7520214610198578063d904176d146101bb578063dce4aa1b146101ce578063f5a3317d146101e157600080fd5b806306fdde03146100c457806320a2d60b146100e257806330cff224146100f7578063570ca7351461011757806366cfe97f1461013757806389afcb441461014a575b600080fd5b6100cc6101f4565b6040516100d99190610e73565b60405180910390f35b6100f56100f0366004610f70565b610282565b005b61010a610105366004611028565b6103ee565b6040516100d9919061105b565b60055461012a906001600160a01b031681565b6040516100d991906110b5565b61010a6101453660046110c9565b610589565b6100f56101583660046110c9565b610715565b6100cc6108bb565b6101786101733660046110c9565b6108c8565b6040516100d991906110e4565b6100f5610193366004610f70565b61093e565b6101ab6101a63660046110c9565b610abc565b60405190151581526020016100d9565b6100f56101c9366004611028565b610b09565b6100f56101dc366004610f70565b610c09565b6101ab6101ef366004611028565b610cfb565b6003805461020190611131565b80601f016020809104026020016040519081016040528092919081815260200182805461022d90611131565b801561027a5780601f1061024f5761010080835404028352916020019161027a565b820191906000526020600020905b81548152906001019060200180831161025d57829003601f168201915b505050505081565b6006546001600160a01b0383166000908152602081905260409081902090516102ab919061116b565b6040518091039020146102fb5760405162461bcd60e51b8152602060048201526013602482015272536f756c20616c72656164792065786973747360681b60448201526064015b60405180910390fd5b6005546001600160a01b031633146103555760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206f70657261746f722063616e206d696e74206e657720736f756c7360448201526064016102f2565b6001600160a01b038216600090815260208181526040909120825180518493610382928492910190610d50565b50602082810151805161039b9260018501920190610d50565b5060408201518160020155606082015181600301559050507f3c3284d117c92d0b1699230960384e794dcba184cc48ff114fe4fed20c9b0565826040516103e291906110b5565b60405180910390a15050565b6104196040518060800160405280606081526020016060815260200160008152602001600081525090565b6001600160a01b038084166000908152600160209081526040808320938616835292905281902081516080810190925280548290829061045890611131565b80601f016020809104026020016040519081016040528092919081815260200182805461048490611131565b80156104d15780601f106104a6576101008083540402835291602001916104d1565b820191906000526020600020905b8154815290600101906020018083116104b457829003601f168201915b505050505081526020016001820180546104ea90611131565b80601f016020809104026020016040519081016040528092919081815260200182805461051690611131565b80156105635780601f1061053857610100808354040283529160200191610563565b820191906000526020600020905b81548152906001019060200180831161054657829003601f168201915b505050505081526020016002820154815260200160038201548152505090505b92915050565b6105b46040518060800160405280606081526020016060815260200160008152602001600081525090565b6001600160a01b038216600090815260208190526040908190208151608081019092528054829082906105e690611131565b80601f016020809104026020016040519081016040528092919081815260200182805461061290611131565b801561065f5780601f106106345761010080835404028352916020019161065f565b820191906000526020600020905b81548152906001019060200180831161064257829003601f168201915b5050505050815260200160018201805461067890611131565b80601f01602080910402602001604051908101604052809291908181526020018280546106a490611131565b80156106f15780601f106106c6576101008083540402835291602001916106f1565b820191906000526020600020905b8154815290600101906020018083116106d457829003601f168201915b50505050508152602001600282015481526020016003820154815250509050919050565b336001600160a01b038216146107815760405162461bcd60e51b815260206004820152602b60248201527f4f6e6c7920757365727320686176652072696768747320746f2064656c65746560448201526a207468656972206461746160a81b60648201526084016102f2565b6001600160a01b0381166000908152602081905260408120906107a48282610dd4565b6107b2600183016000610dd4565b60028201600090556003820160009055505060005b6001600160a01b038216600090815260026020526040902054811015610880576001600160a01b038216600090815260026020526040812080548390811061081157610811611206565b60009182526020808320909101546001600160a01b0390811680845260018352604080852092881685529190925282209092509061084f8282610dd4565b61085d600183016000610dd4565b5060006002820181905560039091015550806108788161121c565b9150506107c7565b507fe22de1457cb61fb61b60176bc4235a9abd19466126b46692bc14fc573f099249816040516108b091906110b5565b60405180910390a150565b6004805461020190611131565b6001600160a01b03811660009081526002602090815260409182902080548351818402810184019094528084526060939283018282801561093257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610914575b50505050509050919050565b6006546001600160a01b038316600090815260208190526040908190209051610967919061116b565b6040518091039020036109e25760405162461bcd60e51b815260206004820152603b60248201527f43616e6e6f742063726561746520612070726f66696c6520666f72206120736f60448201527f756c207468617420686173206e6f74206265656e206d696e746564000000000060648201526084016102f2565b3360009081526001602090815260408083206001600160a01b03861684528252909120825180518493610a19928492910190610d50565b506020828101518051610a329260018501920190610d50565b506040828101516002838101919091556060909301516003909201919091556001600160a01b038416600081815260209384528281208054600181018255908252908490200180546001600160a01b031916339081179091558251908152928301527fa23ac7e4240980962523625b2d1d3aa221354fcc90b374cf0e21685c94288d3e91016103e2565b6006546001600160a01b0382166000908152602081905260408082209051919291610ae7919061116b565b604051809103902003610afc57506000919050565b506001919050565b919050565b336001600160a01b03821614610b7d5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c7920757365727320686176652072696768747320746f2064656c6574656044820152722074686569722070726f66696c65206461746160681b60648201526084016102f2565b6001600160a01b0382166000908152600160209081526040808320338452909152812090610bab8282610dd4565b610bb9600183016000610dd4565b50600060028201819055600390910155604080516001600160a01b038085168252831660208201527fbecbd0337c25e4ba3474143b6f75afd8775e682adad51f00d8f5b0740406fd3391016103e2565b6005546001600160a01b03163314610c6e5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c79206f70657261746f722063616e2075706461746520736f756c206461604482015261746160f01b60648201526084016102f2565b6001600160a01b038216600090815260208181526040909120825180518493610c9b928492910190610d50565b506020828101518051610cb49260018501920190610d50565b5060408201518160020155606082015181600301559050507fd456720fd185d4060f5cea4d82775d2af95048c1e10f227ec35bae950a4be2a8826040516103e291906110b5565b6006546001600160a01b03808416600090815260016020908152604080832093861683529290528181209151909291610d339161116b565b604051809103902003610d4857506000610583565b506001610583565b828054610d5c90611131565b90600052602060002090601f016020900481019282610d7e5760008555610dc4565b82601f10610d9757805160ff1916838001178555610dc4565b82800160010185558215610dc4579182015b82811115610dc4578251825591602001919060010190610da9565b50610dd0929150610e11565b5090565b508054610de090611131565b6000825580601f10610df0575050565b601f016020900490600052602060002090810190610e0e9190610e11565b50565b5b80821115610dd05760008155600101610e12565b6000815180845260005b81811015610e4c57602081850181015186830182015201610e30565b81811115610e5e576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610e866020830184610e26565b9392505050565b80356001600160a01b0381168114610b0457600080fd5b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610edd57610edd610ea4565b60405290565b600082601f830112610ef457600080fd5b813567ffffffffffffffff80821115610f0f57610f0f610ea4565b604051601f8301601f19908116603f01168101908282118183101715610f3757610f37610ea4565b81604052838152866020858801011115610f5057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215610f8357600080fd5b610f8c83610e8d565b9150602083013567ffffffffffffffff80821115610fa957600080fd5b9084019060808287031215610fbd57600080fd5b610fc5610eba565b823582811115610fd457600080fd5b610fe088828601610ee3565b825250602083013582811115610ff557600080fd5b61100188828601610ee3565b60208301525060408301356040820152606083013560608201528093505050509250929050565b6000806040838503121561103b57600080fd5b61104483610e8d565b915061105260208401610e8d565b90509250929050565b60208152600082516080602084015261107760a0840182610e26565b90506020840151601f198483030160408501526110948282610e26565b91505060408401516060840152606084015160808401528091505092915050565b6001600160a01b0391909116815260200190565b6000602082840312156110db57600080fd5b610e8682610e8d565b6020808252825182820181905260009190848201906040850190845b818110156111255783516001600160a01b031683529284019291840191600101611100565b50909695505050505050565b600181811c9082168061114557607f821691505b60208210810361116557634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168061118757607f831692505b602080841082036111a657634e487b7160e01b86526022600452602486fd5b8180156111ba57600181146111cb576111f8565b60ff198616895284890196506111f8565b60008a81526020902060005b868110156111f05781548b8201529085019083016111d7565b505084890196505b509498975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161123c57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220c2c49b6f93a1baa43e3df9d14e66dbdc9f62899b7603b7004d1776979ee20dc964736f6c634300080e0033";

export class MetaStocksSBT__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _name: string,
    _ticker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MetaStocksSBT> {
    return super.deploy(
      _name,
      _ticker,
      overrides || {}
    ) as Promise<MetaStocksSBT>;
  }
  getDeployTransaction(
    _name: string,
    _ticker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _ticker, overrides || {});
  }
  attach(address: string): MetaStocksSBT {
    return super.attach(address) as MetaStocksSBT;
  }
  connect(signer: Signer): MetaStocksSBT__factory {
    return super.connect(signer) as MetaStocksSBT__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MetaStocksSBTInterface {
    return new utils.Interface(_abi) as MetaStocksSBTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MetaStocksSBT {
    return new Contract(address, _abi, signerOrProvider) as MetaStocksSBT;
  }
}
